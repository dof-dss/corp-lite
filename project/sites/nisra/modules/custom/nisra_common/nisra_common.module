<?php

/**
 * @file
 * Primary module hooks for Nisra common module.
 */

use Drupal\Core\Access\AccessResultForbidden;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityStorageInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function nisra_common_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_object->getEntity();

  if ($node->bundle() === 'secure_market_statistics' || $node->bundle() === 'secure_statistics') {
    $form['#validate'][] = 'nisra_common_validate_secure_attachment';
  }

  if ($node->bundle() === 'publication') {
    $form['#validate'][] = 'nisra_common_validate_attachment';
  }
}

/**
 * Form validation callback.
 */
function nisra_common_validate_secure_attachment(&$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();

  // Validate file attachments and external links.
  if (empty($values['field_secure_attachment']["selection"][0]) && empty($values['field_external_publication'][0]['uri'])) {
    $form_state->setErrorByName('field_secure_attachment', t('You must provide an attachment or external link'));
    $form_state->setErrorByName('field_external_publication', t('You must provide an attachment or external link'));
  }
}

/**
 * Form validation callback.
 */
function nisra_common_validate_attachment(&$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();

  // Validate file attachments and external links.
  if (empty($values['field_attachment']["selection"][0]) && empty($values['field_external_publication'][0]['uri'])) {
    $form_state->setErrorByName('field_attachment', t('You must provide an attachment or external link'));
    $form_state->setErrorByName('field_external_publication', t('You must provide an attachment or external link'));
  }
}

/**
 * Implements hook_file_download().
 */
function nisra_common_file_download($uri) {
  // Check if the file is coming from the private stream wrapper, these are
  // the only ones that we want to check.
  if (StreamWrapperManager::getScheme($uri) == 'private') {

    // Get the file record based on the URI. If not in the database just return.
    $file_repository = \Drupal::service('file.repository');
    $file = $file_repository->loadByUri($uri);
    if (!$file) {
      return;
    }

    // Identify the media that is being downloaded
    $database = \Drupal::database();
    $references = file_get_file_references($file, NULL, EntityStorageInterface::FIELD_LOAD_CURRENT, NULL);
    foreach ($references as $field) {
      if (isset($field['media'])) {
        // Retrieve the media ids (mids).
        $mids = array_keys($field['media']);
        foreach ($mids as $mid) {
          if (!check_media_access($database, $mid)) {
            \Drupal::logger('nisra_common')->notice(t("Calling check_media_access"));
            return -1;
          }
        }
      }
    }
  }

  return NULL;
}

/**
 * Check access for this media id (mid).
 */
function check_media_access($database, $mid) {
  // Find all nodes of type 'Secure Statistics' or
  // 'Secure - market sensitive statistics' that this media item is attached to.
  \Drupal::logger('nisra_common')->notice(t("Called check_media_access"));
  $query = $database->query("select entity_id, bundle
                        from node__field_secure_attachment
                        where bundle in ('secure_statistics','secure_market_statistics' )
                        and field_secure_attachment_target_id = :mid", [':mid' => $mid]);
  $result = $query->fetchAll();
  // Loop through all nodes, if the current user is denied access on one,
  // then they are denied on all !
  foreach ($result as $entity) {
    // Load up the entity/node.
    $node = Node::load($entity->entity_id);
    if (!empty($node)) {
      // If the entity is published then allow access and don't bother
      // with any more checks.
      if (!$node->isPublished()) {
        if (Drupal::currentUser()->isAnonymous()) {
          // If this is an anonymous user then deny access.
          return FALSE;
        } else {
          // This is a logged in user so we need to check permissions.
          // Permissions that we are looking for are
          // 'view secure_market_statistics revisions' or
          // 'view secure_statistics revision'
          if (!\Drupal::currentUser()->hasPermission('view ' . $entity->bundle . ' revisions')) {
            // User does not have permission, deny access.
            return FALSE;
          }
        }
      }
    }
  }
  return TRUE;
}

