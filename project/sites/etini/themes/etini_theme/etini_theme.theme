<?php

/**
 * @file
 * Functions to support theming in the etini_theme.
 */

use Drupal\block\Entity\Block;
use Drupal\nicsdru_corplite_theme\LayoutClasses;
use Drupal\node\NodeInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function etini_theme_preprocess_page(array &$variables) {
  // Process node pages.
  if (!empty($variables['node'])) {
    $node = $variables['node'];

    if (method_exists($node, 'bundle')) {
      switch ($node->bundle()) {
        // Specific node types have a main and aside.
        case "news":
        case "page":
          $variables['main_content_attr']->addClass(LayoutClasses::MAIN_SIDE);
          $variables['sidebar_second_attr']->addClass('ga-aside');
          break;

        // All the rest have a main with a limited width.
        default:
          $variables['main_content_attr']->addClass(LayoutClasses::MAIN_LIMITED);
          break;
      }
      // Add the main with a limited width to taxonomy terms also.
    } else {
      $variables['main_content_attr']->addClass(LayoutClasses::MAIN_LIMITED);
    }
  }

  // Process search view pages.
  $viewpage = \Drupal::routeMatch()->getParameter('view_id');

  // Will need bits and pieces from the request.
  $request = \Drupal::request();

  if (!empty($viewpage)) {
    switch ($viewpage) {
      case "publication_search":
        $variables['main_content_attr']->addClass(LayoutClasses::SIDE_MAIN);
        $variables['sidebar_first_attr']
          ->addClass('ga-aside')
          ->setAttribute('role', 'search')
          ->setAttribute('aria-roledescription', t('search publications'));
        break;

      case "news_search":
        $variables['main_content_attr']->addClass(LayoutClasses::SIDE_MAIN);
        $variables['sidebar_first_attr']
          ->addClass('ga-aside')
          ->setAttribute('role', 'search')
          ->setAttribute('aria-roledescription', t('search news'));
        break;

      case "search":
        $variables['main_content_attr']->addClass(LayoutClasses::MAIN_LIMITED);
        $variables['content_wrapper_attr']
          ->addClass(['ga-main', 'search-content'])
          ->setAttribute('role', 'presentation');
        break;
      case "contacts":
        $variables['main_content_attr']->addClass(LayoutClasses::MAIN_LIMITED);
        $variables['content_wrapper_attr']
          ->addClass(['ga-main', 'contacts-content'])
          ->setAttribute('role', 'presentation');
    }
  }

  if (isset($variables['is_front']) && $variables['is_front'] == TRUE) {
    $front_classes = ['grid', 'layout--front'];
    $variables['main_content_attr']->addClass($front_classes);
    $variables['sidebar_second_attr']->addClass('section--quicklinks');
  }
}

/**
 * Implements hook_preprocess_node().
 */
function etini_theme_preprocess_node(array &$variables) {
  switch ($variables['node']->getType()) {

    case "application":
    case "article":
    case "contact":
    case "publication":
    case "gallery":
    case "department_management":
      $variables['attributes']['class'][] = Html::cleanCssIdentifier('ga-main');
      $variables['attributes']['class'][] = Html::cleanCssIdentifier('article-content');

      break;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function etini_theme_preprocess_block(array &$variables) {
  // Include social links as part of the social menu block
  if (preg_match('/^system_menu_block\:(menu-footer-menu)$/', $variables['plugin_id'])) {
    $social_links = corplite_social_links(); // Fetch social links from settings.

    if (!empty($social_links)) {
      foreach ($social_links as $id => $link) {
        $link['#attributes']['class'][] = 'social-' . $id;

        // creating a font awesome class and adding to each of the social links
        $icon_class = '';

        switch ($id) {
          case 'twitter':
            $icon_class = 'fab fa-x-twitter';
            break;
          case 'facebook':
            $icon_class = 'fab fa-facebook';
            break;
          case 'youtube':
            $icon_class = 'fab fa-youtube';
            break;
          case 'instagram':
            $icon_class = 'fab fa-instagram';
            break;
          case 'linkedin':
            $icon_class = 'fab fa-linkedin';
            break;
          case 'rss':
            $icon_class = 'fas fa-rss';
            break;
        }

        if ($icon_class) {
          $link['#attributes']['class'][] = 'social-icon ' . $icon_class;
        }

        // Set the link title to an empty string, as we only want the icon to display
        $social_links[$id] = Link::fromTextAndUrl('', $link['#url'])->toRenderable();

        // Ensure the attributes with the class are included
        $social_links[$id]['#attributes'] = $link['#attributes'];
      }

      // Add the modified social links to the block variables.
      $variables['social_links'] = $social_links;
    }
  }
}

/**
 * Utility function to return theme config as array of Link elements.
 *
 * @return array
 *   List of social media provider links.
 */
function corplite_social_links() {
  $platforms = [
    'twitter' => t('Twitter'),
    'facebook' => t('Facebook'),
    'youtube' => t('YouTube'),
    'instagram' => t('Instagram'),
    'linkedin' => t('LinkedIn'),
    'rss' => t('RSS'),
  ];
  $social_links = [];

  // Fetch links from the theme settings and use as part of render elements.
  foreach ($platforms as $id => $label) {
    $platform_url = theme_get_setting("social_links_$id", 'etini_theme');

    if (empty($platform_url)) {
      continue; // Skip any empty links.
    }

    // Check for any internal paths.
    if (0 !== strpos($platform_url, "http")) {
      // Make sure internal paths are handled correctly.
      $platform_url = ltrim($platform_url, '/');
      $platform_url = 'internal:/' . $platform_url;
    }

    // Prepare the links as renderable objects.
    $social_links[$id] = Link::fromTextAndUrl($label, Url::fromUri($platform_url))->toRenderable();
  }

  return $social_links;
}

function etini_theme_preprocess_field(array &$variables) {
  if ($variables['element']['#field_name'] === 'field_html_document') {
    foreach ($variables['items'] as $key => &$item) {

      if (!empty($variables['element']['#items'][$key]) && $variables['element']['#items'][$key]->entity) {
        $node = $variables['element']['#items'][$key]->entity;
        if ($node->bundle() === 'html_document') {
          $url = Url::fromRoute('entity.node.canonical', ['node' => $node->id()], [
            'attributes' => ['class' => ['file-link', 'file--ico', 'file--ico__html']],
          ]);
          $link = Link::fromTextAndUrl($node->label(), $url)->toRenderable();
          $item['content'] = $link;
        }
      }
    }
  }
}
