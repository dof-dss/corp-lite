@use "sass:list";
@use "sass:meta";
@use '../../../init' as *;
/*
 * @file
 * Provides some base definitions that are common among button type elements.
 */

@use '../../../1_base/root';

@mixin btn($size: default, $arrow-direction: none, $arrow-colour: white) {

  // Default coloring for all buttons.
  @include btn-color(var(--clr-button), var(--clr-button), var(--clr-white), 'dark'); // bg-color, border-color, txt-color, scheme.

  // Properties shared by all buttons.  Try to avoid specifying properties that will often be overridden. Especially
  // sizing, spacing and font properties.
  display: inline-block;
  border: 1px solid transparent;
  border-radius: 0;
  text-align: center;
  text-decoration: none;
  background-repeat: no-repeat;
  background-position-y: center;
  appearance: none;

  &:link,
  &:visited {
    color: var(--clr-white);
  }

  &:focus {
    outline: 3px solid #000;
  }

  &:hover {
    text-decoration: none;
  }

  &:active {
    outline: 0;
  }

  // Set background arrow depending on direction and colour of arrow.
  @if $arrow-direction {
    @if $arrow-direction == right {
      @if $arrow-colour == black {
        background-image: url('/themes/custom/nicsdru_corplite_theme/images/arrow_forward_black.svg');
      }
      @else {
        background-image: url('/themes/custom/nicsdru_corplite_theme/images/arrow_forward_white.svg');
      }
    }
    @else if $arrow-direction == left {
      @if $arrow-colour == black {
        background-image: url('/themes/custom/nicsdru_corplite_theme/images/arrow_back_black.svg');
      }
      @else {
        background-image: url('/themes/custom/nicsdru_corplite_theme/images/arrow_back_white.svg');
      }
    }
  }

  // Add sizing to the button using the _btn private mixin.
  // @include _btn($min-width, $min-height, $padding, $arrow-direction).
  // Note the _btn mixin will calculate appropriate padding to accommodate arrows depending on the
  // the amount of side padding the button it is given - bigger left or right padding = bigger arrow.
  @if $size == 'small' {
    @include _btn(36px, 36px, (4px 4px), $arrow-direction);
    font-size: 1.4rem;
    line-height: 2.2rem;
    @include breakpoint($tab) {
      @include _btn(39px, 39px, (5px 6px), $arrow-direction);
      font-size: 1.6rem;
      line-height: 2.4rem;
    }
    @include breakpoint($desk-plus) {
      @include _btn(40px, 40px, (6px 7px), $arrow-direction);
      font-size: 1.7rem;
      line-height: 2.5rem;
    }
  }
  @else if $size == 'standard' {
    @include _btn(44px, 44px, (8px 12px), $arrow-direction);
    font-size: 1.6rem;
    line-height: 2.4rem;
    @include breakpoint($tab) {
      @include _btn(45px, 45px, (8px 13px), $arrow-direction);
      font-size: 1.8rem;
      line-height: 2.7rem;
    }
    @include breakpoint($desk-plus) {
      @include _btn(50px, 50px, (9px 15px), $arrow-direction);
      font-size: 2rem;
      line-height: 3rem;
    }
  }
  @else if $size == 'medium' {
    @include _btn(60px, 48px, (7px 14px), $arrow-direction);
    font-size: 1.8rem;
    line-height: 2.4rem;
    @include breakpoint($tab) {
      @include _btn(90px, 51px, (6px 17px), $arrow-direction);
      font-size: 2.1rem;
      line-height: 3rem;
    }
    @include breakpoint($desk-plus) {
      @include _btn(100px, 55px, (5px 20px), $arrow-direction);
      font-size: 2.2rem;
      line-height: 3.5rem;
    }
  }
  @else if $size == 'large' {
    @include _btn(80px, 52px, (7px 16px), $arrow-direction);
    font-size: 2.1rem;
    line-height: 3.2rem;
    @include breakpoint($tab) {
      @include _btn(150px, 54px, (8px 19px), $arrow-direction);
      font-size: 2.4rem;
      line-height: 3.6rem;
    }
    @include breakpoint($desk-plus) {
      @include _btn(170px, 60px, (9px 20px), $arrow-direction);
      font-size: 2.5rem;
      line-height: 4rem;
    }
  }
  @else {
    @include _btn(44px, 44px, (8px 12px), $arrow-direction);
    font-size: 1.6rem;
    line-height: 2.4rem;
    @include breakpoint($tab) {
      @include _btn(45px, 45px, (8px 13px), $arrow-direction);
      font-size: 1.8rem;
      line-height: 2.7rem;
    }
    @include breakpoint($desk-plus) {
      @include _btn(50px, 50px, (9px 15px), $arrow-direction);
      font-size: 2rem;
      line-height: 3rem;
    }
  }
}

@mixin btn-color($bg-color: var(--clr-grey-dark), $border-color: $bg-color, $txt-color: var(--clr-white), $scheme: 'dark') {

  $bg-color-hover: color-mix(in srgb, $bg-color, black 5%);
  $bg-color-active: color-mix(in srgb, $bg-color, black 8%);
  $bg-color-focus: $bg-color-active;
  $border-color-hover: color-mix(in srgb, $border-color, black 5%);
  $border-color-active: color-mix(in srgb, $border-color, black 10%);
  $border-color-focus: $border-color-hover;

  @if($scheme == 'light') {
    $bg-color-hover: color-mix(in srgb, $bg-color, white 5%);
    $bg-color-active: color-mix(in srgb, $bg-color, black 3%);
    $bg-color-focus: $bg-color-active;
    $border-color-hover: color-mix(in srgb, $border-color, black 5%);
    $border-color-active: $border-color-hover;
    $border-color-focus: $border-color-hover;
  }

  background-color: $bg-color;
  border-color: $border-color;
  color: $txt-color;

  &:hover {
    background-color: $bg-color-hover;
    border-color: $border-color-hover;
    color: $txt-color;
  }

  &:active {
    background-color: $bg-color-active;
    border-color: $border-color-active;
    color: $txt-color;
  }

  &:focus {
    background-color: $bg-color-focus;
    border-color: $border-color-focus;
    color: $txt-color;
  }
}

@mixin _btn($min-width, $min-height, $padding, $arrow-direction) {
  @include adjust-property-size-to($min-width, min-width);
  @include adjust-property-size-to($min-height, min-height);
  @include adjust-property-size-to($padding, padding);

  @if $arrow-direction {

    // Make room for an arrow - add extra padding to the left or right of the button.
    // The background arrow is 2/3 width of the extra left or right padding
    // and is offset by half of the space remaining.

    // Defaults.
    $padding-side: 1.2em;
    $background-size: .6667em;
    $background-position-x-offset: ($padding-side - $background-size) / 2;

    @if meta.type-of($padding) == 'list' {
      // The second value in the list is side padding.
      // Double it to make room for an arrow.
      $padding-side: list.nth($padding, 2) * 2;
      // The arrow is 2/3 width of the padding available to it.
      $background-size: $padding-side * .6667;
      // The arrow is offset from the side of the button by half of the remaining space.
      $background-position-x-offset: ($padding-side - $background-size) / 2;
    }

    background-size: $background-size auto;

    // Set the padding and background-position depending on arrow direction.
    @if $arrow-direction == left {
      @include adjust-property-size-to($padding-side, padding-left);
      //padding-left: $padding-side;
      background-position: left $background-position-x-offset top 50%;
    }

    @if $arrow-direction == right {
      @include adjust-property-size-to($padding-side, padding-right);
      //padding-right: $padding-side;
      background-position: right $background-position-x-offset top 50%;
    }
  }
}

@mixin btn--block {
  display: block !important;
  width: 100%;
}

@mixin btn--link {

  @include link-state-style($link-basic);

  // Remove button background and border.
  // Since this is a modifier mixin, it needs to be aggressive and so some properties
  // will use the !important rule.
  background: none !important;
  border: 0 !important;
  box-shadow: none !important;
}

@mixin btn--link-inline {
  @include btn--link;

  // Remove or reset sizing and spacing properties.
  // Since this is a modifier mixin, it needs to be aggressive and so some properties
  // will use the !important rule.
  display: inline !important;
  width: auto !important;
  height: auto !important;
  min-width: auto !important;
  min-height: auto !important;
  padding: 0 !important;
  margin: 0 !important;
}

// The disabled variation should always go last, so that it overrides any
// other variations.
%button--disabled[disabled] {
  // Re-set default cursor for disabled elements.
  cursor: default;
  color: var(--clr-grey-light);

  &:hover,
  &:focus,
  &:active {
    // Override any link underlines and color changes.
    color: var(--clr-grey-light);
  }
}
